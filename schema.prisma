// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//모델생성

model accounts {
  id         Int    @id @default(autoincrement())
  name       String @db.VarChar(255)
  otp_key    String
  nick       String @db.VarChar(30)
  avatar_key String

  session                 sessions?    @relation("sessions", fields: [loggedin_session], references: [id])
  loggedin_session        Int?
  active_status           ActiveStatus
  active_recent_timestamp DateTime

  registration_state     RegistrationState
  registration_timestamp DateTime
  creation_timestamp     DateTime

  is_operator    Boolean
  email_address  String
  status_message String

  friends_account        friend[] @relation("friends_account")
  friends_friend_account friend[] @relation("friends_friend_account")

  achievements achievements[]

  enemies_account       enemies[] @relation("enemies_account")
  eneries_enemy_account enemies[] @relation("eneries_enemy_account")

  chat_menbers  chat_members[]
  chat_messages chat_messages[]

  chat_bans_account         chat_bans[] @relation("chat_bans_account")
  chat_bans_manager_account chat_bans[] @relation("chat_bans_manager_account")

  items    items[]
  sessions sessions[]

  bans_account         bans[]          @relation("bans_account")
  bans_manager_account bans[]          @relation("bans_manager_account")
  game_queue           game_queue?
  game_members         game_members?
  accounts_game        accounts_game[]
  game_history         game_history[]
}

model accounts_game {
  account         accounts @relation(fields: [account_id], references: [id])
  account_id      Int      @id
  game_statistics Json
  win_count       Int
  lose_count      Int
  tie_count       Int
  skill_rating    Int
}

model friend {
  account           accounts @relation("friends_account", fields: [account_id], references: [id])
  account_id        Int
  friend_account    accounts @relation("friends_friend_account", fields: [friend_account_id], references: [id])
  friend_account_id Int
  group_name        String
  active_flag       Int

  @@id([account_id, friend_account_id])
}

model achievements {
  account             accounts @relation(fields: [account_id], references: [id])
  account_id          Int
  achievement_id      Int
  completed_timestamp DateTime

  @@id([account_id, achievement_id])
}

model enemies {
  account          accounts @relation("enemies_account", fields: [account_id], references: [id])
  account_id       Int
  enemy_account    accounts @relation("eneries_enemy_account", fields: [enemy_account_id], references: [id])
  enemy_account_id Int
  memo             String

  @@id([account_id, enemy_account_id])
}

model chat_rooms {
  id        Int    @id @default(autoincrement())
  title     String
  mode_flag Int
  password  String
  limit     Int

  chat_members  chat_members[]
  chat_messages chat_messages[]
  chat_bans     chat_bans[]
}

model chat_members {
  chat_rooms    chat_rooms @relation(fields: [chat_rooms_id], references: [id])
  chat_rooms_id Int
  account       accounts   @relation(fields: [account_id], references: [id])
  account_id    Int
  mode_flag     Int

  @@id([chat_rooms_id, account_id])
}

model chat_messages {
  chat_rooms    chat_rooms @relation(fields: [chat_rooms_id], references: [id])
  chat_rooms_id Int
  account       accounts   @relation(fields: [account_id], references: [id])
  account_id    Int
  content       String
  timestamp     DateTime
  mode_flag     Int

  @@id([chat_rooms_id, account_id, timestamp])
}

model chat_bans {
  id                        Int        @default(autoincrement())
  chat_rooms                chat_rooms @relation(fields: [chat_rooms_id], references: [id])
  chat_rooms_id             Int
  account                   accounts   @relation("chat_bans_account", fields: [account_id], references: [id])
  account_id                Int
  chat_bans_manager_account accounts   @relation("chat_bans_manager_account", fields: [manager_account_id], references: [id])
  manager_account_id        Int
  reason                    String
  expire_datetime           DateTime
  timestamp                 DateTime
  memo                      String

  @@id([id, chat_rooms_id, account_id, manager_account_id])
}

model items {
  id              Int      @id @default(autoincrement())
  account         accounts @relation(fields: [account_id], references: [id])
  account_id      Int
  item_id         Int
  expire_datetime DateTime
  attribute_flag  Int
}

model sessions {
  id         Int      @id @default(autoincrement())
  account    accounts @relation(fields: [account_id], references: [id])
  account_id Int
  token      String

  accounts accounts[] @relation("sessions")
}

model bans {
  id                 Int      @default(autoincrement())
  account            accounts @relation("bans_account", fields: [account_id], references: [id])
  account_id         Int
  manger_account     accounts @relation("bans_manager_account", fields: [manager_account_id], references: [id])
  manager_account_id Int

  reason          String
  expire_datetime DateTime
  timestamp       DateTime
  memo            String

  @@id([id, account_id, manager_account_id])
}

model game_queue {
  account      accounts @relation(fields: [account_id], references: [id])
  account_id   Int      @id
  skill_rating Int
  timestamp    DateTime
}

model games {
  id         Int      @id @default(autoincrement())
  server_id  Int
  timestamp  DateTime
  game_mode  Int
  field_id   Int
  states     Json
  statistics Json

  game_members game_members[]
}

model game_members {
  account    accounts @relation(fields: [account_id], references: [id])
  account_id Int      @id
  game       games    @relation(fields: [game_id], references: [id])
  game_id    Int
  options    Json
  statistics Json?
}

model game_history {
  id                 Int        @id @default(autoincrement())
  accounts           accounts[]
  game_mode          Int
  field_id           Int
  statistics         Json
  members_statistics Json
}

enum ActiveStatus {
  OFFLINE
  ONLINE
  IDLE
  DO_NOT_DISTURB
  INVISIBLE
  GAME
}

enum RegistrationState {
  NOT_AUTHENTICATED
  OK
  PENDING_DESTROY
  ANONIMIZED
}
